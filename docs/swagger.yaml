basePath: /
definitions:
  bookstore-api_internal_models.Book:
    description: Book model to show it contains
    properties:
      author:
        example: Л. Н. Толстой
        type: string
      id:
        example: 1
        type: integer
      price:
        example: 1300
        type: integer
      title:
        example: Война и мир
        type: string
      user_id:
        example: 1
        type: integer
    required:
    - author
    - price
    - title
    type: object
  bookstore-api_internal_models.BookRequest:
    description: Book creation/update request
    properties:
      author:
        example: Л. Н. Толстой
        type: string
      price:
        example: 1300
        type: integer
      title:
        example: Война и мир
        type: string
    required:
    - author
    - price
    - title
    type: object
  bookstore-api_internal_models.BookResponse:
    description: Basic book information response
    properties:
      author:
        example: Л. Н. Толстой
        type: string
      id:
        example: 1
        type: integer
      price:
        example: 1300
        type: integer
      title:
        example: Война и мир
        type: string
    type: object
  bookstore-api_internal_models.ErrorResponse:
    description: Default error response
    properties:
      error:
        example: error description
        type: string
    type: object
  bookstore-api_internal_models.GetBooks:
    description: Paginated books response
    properties:
      data:
        items:
          $ref: '#/definitions/bookstore-api_internal_models.Book'
        type: array
      meta:
        $ref: '#/definitions/bookstore-api_internal_models.MetaBook'
    type: object
  bookstore-api_internal_models.MetaBook:
    description: Books response metadata
    properties:
      total:
        example: 5
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  bookstore-api_internal_models.Request:
    description: User credentials for login or registration
    properties:
      password:
        example: 12345qwerty
        type: string
      username:
        example: Wladim1r
        type: string
    required:
    - password
    - username
    type: object
  bookstore-api_internal_models.SuccessResponse:
    description: Default successfully response
    properties:
      message:
        example: message description
        type: string
    type: object
  bookstore-api_internal_models.UserBooksResponse:
    description: User profile with books list
    properties:
      books:
        items:
          $ref: '#/definitions/bookstore-api_internal_models.BookResponse'
        type: array
      total_books:
        example: 2
        type: integer
      username:
        example: Wladim1r
        type: string
    type: object
  bookstore-api_internal_models.UserResponse:
    description: User response including ID, username and quantity of books
    properties:
      id:
        example: 1
        type: integer
      total:
        example: 10
        type: integer
      username:
        example: Wladim1r
        type: string
    type: object
  bookstore-api_internal_models.UsersBooksResponse:
    description: List of users with their books
    properties:
      data:
        items:
          $ref: '#/definitions/bookstore-api_internal_models.UserBooksResponse'
        type: array
    type: object
  bookstore-api_internal_models.UsersResponse:
    description: Response containing user array
    properties:
      users:
        items:
          $ref: '#/definitions/bookstore-api_internal_models.UserResponse'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: RESP API for managing books and personal user list of books
  title: BookStore API
  version: 1.1.3
paths:
  /admin/books:
    get:
      consumes:
      - application/json
      description: Get books collection for all registered users
      operationId: get-all-books
      produces:
      - application/json
      responses:
        "200":
          description: List of books of all users
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.UsersBooksResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Records not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Get books of all users
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get credentials of all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: List of all users
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.UsersResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Records not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Get all users
      tags:
      - Admin
  /admin/users/{username}:
    delete:
      consumes:
      - application/json
      description: Delete user by username
      operationId: delete-user
      parameters:
      - description: Username to delete
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message about successfully deleting
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.UsersResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - Admin
  /api/books:
    get:
      consumes:
      - application/json
      description: Get user books collection with parameters
      operationId: get-user-books
      parameters:
      - description: Filter by author name
        example: '"Пушкин"'
        in: query
        name: author
        type: string
      - description: Filter by title
        example: '"Я вас любил"'
        in: query
        name: title
        type: string
      - description: Limit number of records
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of books of user
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.GetBooks'
        "400":
          description: Invalid query body
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Records not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get books of user
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create book with users parameters
      operationId: post-user-book
      parameters:
      - description: Data for create book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bookstore-api_internal_models.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Message about successfully creating
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - Books
  /api/books/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete book
      operationId: delete-user-book
      parameters:
      - description: ID of the book to delete
        example: 3
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Message about successfully deleting
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete book
      tags:
      - Books
    patch:
      consumes:
      - application/json
      description: Change book to new parameters
      operationId: update-user-book
      parameters:
      - description: ID of the book to change
        example: 13
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: New data for change existing data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bookstore-api_internal_models.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message about successfully updating
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Database or Server error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update book
      tags:
      - Books
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login in created account with yourself credentials
      operationId: login-user
      parameters:
      - description: Credentials for login in created accound
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bookstore-api_internal_models.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Give Token after successfully authorization
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.SuccessResponse'
        "400":
          description: Invalid body request
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User do not registred
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "403":
          description: Incorrect password
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      summary: Login
      tags:
      - Authorization
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user with his username and password
      operationId: register-user
      parameters:
      - description: Credentials for create user account
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bookstore-api_internal_models.Request'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.SuccessResponse'
        "400":
          description: Invalid body request
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "401":
          description: User unauthorized
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/bookstore-api_internal_models.ErrorResponse'
      summary: Register new user
      tags:
      - Authorization
securityDefinitions:
  ApiKeyAuth:
    description: 'JWT token with ''Bearer '' prefix. Example: `Bearer eyJhbGci...`'
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
